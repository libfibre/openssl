$(eval OPENSSL_TOP = $(THISDIR))
OPENSSL_PLATFORM := linux-x86_64
OPENSSL_CFLAGS := -DOPENSSL_THREADS -D_REENTRANT -DDSO_DLFCN -DHAVE_DLFCN_H -Wa,--noexecstack -m64 -DL_ENDIAN -Wall -O3 -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DMD5_ASM -DAES_ASM -DVPAES_ASM -DBSAES_ASM -DWHIRLPOOL_ASM -DGHASH_ASM -DECP_NISTZ256_ASM
OPENSSL_CPUID_ASM := x86_64cpuid.s
OPENSSL_CFLAGS += -I$(OPENSSL_TOP)/include -I$(OPENSSL_TOP)

SUBDIRS = crypto engines ssl apps

# To support out-of-tree builds (we are supposed to tolerate the situation
# where the source tree is read-only), we set up two new directories in the
# "out" tree for auto-generated stuff. The inner one is to allow us to satisfy
# source code that does;
#     #include <openssl/opensslconf.h>
OPENSSL_OUTDIR1 := $(TOP_OUT)/openssl
OPENSSL_CFLAGS += -I$(OPENSSL_OUTDIR1)
OPENSSL_OUTDIR2 := $(OPENSSL_OUTDIR1)/openssl
OPENSSL_OUTDIRS := $(OPENSSL_OUTDIR1) $(OPENSSL_OUTDIR2)
$(OPENSSL_OUTDIR2): $(OPENSSL_OUTDIR1)

# There is some very quirky logic in OpenSSL's Configure script that reads in
# crypto/opensslconf.h.in and spits out include/openssl/opensslconf.h using all
# the configuration inputs. As with the above definitions, we're hard-coding
# the configuration for now, so the following is to bypass this problem.
#
# Here, we just define a dummy rule to "regenerate" opensslconf.h by copying it
# from a static capture I took from the regular build (which is where I got the
# hard-coded OPENSSL_* values too). The dependency is on that hard-coded dump
# as well as opensslconf.h.in, just for the sake of illustration.
#
$(OPENSSL_OUTDIR2)/opensslconf.h: $(OPENSSL_TOP)/crypto/opensslconf.h.in $(OPENSSL_TOP)/opensslconf.h.static | $(OPENSSL_OUTDIR2)
	$(Q)cp $(OPENSSL_TOP)/opensslconf.h.static $(OPENSSL_OUTDIR2)/opensslconf.h

$(OPENSSL_OUTDIR1)/buildinf.h: $(OPENSSL_TOP)/util/mkbuildinf.pl | $(OPENSSL_DIR1)
	$(Q)perl $(OPENSSL_TOP)/util/mkbuildinf.pl "$(CC) $(OPENSSL_CFLAGS)" "$(OPENSSL_PLATFORM)" > $(OPENSSL_OUTDIR1)/buildinf.h

# Adding our autogenerated directories and outputs to these globals causes them
# to enter the "build system". I.e.  they get generated on "make", and they get
# removed on "make clean".
$(eval OUTS += $(OPENSSL_OUTDIR2)/opensslconf.h)
$(eval OUTS += $(OPENSSL_OUTDIR1)/buildinf.h)
$(eval OUT_DIRS += $(OPENSSL_OUTDIRS))

# This subroutine is used to generate rules for perl-asm autogen
# $(1) = symbol name
# $(2) = input file, relative to current-dir
# $(3) = libname, to add to $(libname)_SOURCES
define perl_asm
  $(eval $(3)_$(1)_input = $(THISDIR)/$(2))
  $(eval $(3)_$(1)_output = $(OPENSSL_OUTDIR1)/$(1).s)
  $(eval OUTS += $($(3)_$(1)_output))
  $(eval $(3)_SOURCES += $($(3)_$(1)_output))
$($(3)_$(1)_output): $($(3)_$(1)_input) | $(OPENSSL_DIR1)
	perl $($(3)_$(1)_input) elf $($(3)_$(1)_output)
endef

